/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cumimpactsa;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ast
 */
public class MonteCarloRanksDialog extends javax.swing.JDialog {

    private boolean simulationReady=false;
    private MCSimulationManager mcm;
    /**
     * Creates new form MonteCarloRanksDialog
     */
    public MonteCarloRanksDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public void setSimulationManager(MCSimulationManager mcm)
    {
        this.mcm = mcm;
    }
    
    public boolean isSimulationReady()
    {
        return simulationReady;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textFieldSimulationRuns = new javax.swing.JTextField();
        textFieldOutputFolder = new javax.swing.JTextField();
        buttonOutputFolder = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        checkBoxTransfNone = new javax.swing.JCheckBox();
        textFieldMissingStressorDataMin = new javax.swing.JTextField();
        textFieldMissingStressorDataMax = new javax.swing.JTextField();
        textFieldSensitivtyScoreErrorsMin = new javax.swing.JTextField();
        checkBoxSensitivtyScoreErrors = new javax.swing.JCheckBox();
        textFieldSensitivtyScoreErrorMax = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textFieldPointStressDecayMax = new javax.swing.JTextField();
        textFieldPointStressDecayMin = new javax.swing.JTextField();
        checkBoxPointStressDecay = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        checkBoxMissingStressorData = new javax.swing.JCheckBox();
        checkBoxTransfLog = new javax.swing.JCheckBox();
        checkBoxTransfPercentile = new javax.swing.JCheckBox();
        checkBoxTransfCut10 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        checkBoxMultiAdditive = new javax.swing.JCheckBox();
        checkBoxMultiWorst = new javax.swing.JCheckBox();
        checkBoxMultiDiminish = new javax.swing.JCheckBox();
        textFieldThresholdsMax = new javax.swing.JTextField();
        textFieldThresholdsMin = new javax.swing.JTextField();
        checkBoxThresholds = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        checkBoxReducedAnalysisRes = new javax.swing.JCheckBox();
        textFieldReducedAnalysisResMin = new javax.swing.JTextField();
        textFieldReducedAnalysisResMax = new javax.swing.JTextField();
        checkBoxImprovedStressorRes = new javax.swing.JCheckBox();
        buttonCancel = new javax.swing.JButton();
        buttonRunSimulation = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        checkBoxImpactsAsSum = new javax.swing.JCheckBox();
        checkBoxImpactsAsMean = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        checkBoxSpatialSummary = new javax.swing.JCheckBox();
        checkBoxAddRunsToResults = new javax.swing.JCheckBox();
        checkBoxSaveContributionsPerSimulation = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Simulation runs");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, -1, -1));

        textFieldSimulationRuns.setText("100");
        getContentPane().add(textFieldSimulationRuns, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 22, 118, -1));

        textFieldOutputFolder.setEditable(false);
        textFieldOutputFolder.setText("not selected");
        getContentPane().add(textFieldOutputFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 22, 427, -1));

        buttonOutputFolder.setText("...");
        buttonOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOutputFolderActionPerformed(evt);
            }
        });
        getContentPane().add(buttonOutputFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 23, -1, -1));

        jLabel2.setText("Output folder");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, -1, -1));

        jLabel3.setText("Model factors and range");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 64, -1, -1));

        checkBoxTransfNone.setText("None");
        getContentPane().add(checkBoxTransfNone, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 140, -1, -1));

        textFieldMissingStressorDataMin.setText("0");
        getContentPane().add(textFieldMissingStressorDataMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 52, -1));

        textFieldMissingStressorDataMax.setText("0.333");
        getContentPane().add(textFieldMissingStressorDataMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 132, -1, -1));

        textFieldSensitivtyScoreErrorsMin.setText("0");
        textFieldSensitivtyScoreErrorsMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldSensitivtyScoreErrorsMinActionPerformed(evt);
            }
        });
        getContentPane().add(textFieldSensitivtyScoreErrorsMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 52, -1));

        checkBoxSensitivtyScoreErrors.setSelected(true);
        checkBoxSensitivtyScoreErrors.setText("Sensitivity score errors");
        getContentPane().add(checkBoxSensitivtyScoreErrors, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        textFieldSensitivtyScoreErrorMax.setText("1.0");
        textFieldSensitivtyScoreErrorMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldSensitivtyScoreErrorMaxActionPerformed(evt);
            }
        });
        getContentPane().add(textFieldSensitivtyScoreErrorMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, 53, -1));

        jLabel4.setText("Input data");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 110, -1, -1));

        textFieldPointStressDecayMax.setText("20000");
        getContentPane().add(textFieldPointStressDecayMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, 50, -1));

        textFieldPointStressDecayMin.setText("0");
        getContentPane().add(textFieldPointStressDecayMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 52, -1));

        checkBoxPointStressDecay.setSelected(true);
        checkBoxPointStressDecay.setText("Point data stress decay");
        getContentPane().add(checkBoxPointStressDecay, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));

        jLabel5.setText("Linear decay of stress intensity");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        jLabel6.setText("Output");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 400, -1, -1));

        checkBoxMissingStressorData.setSelected(true);
        checkBoxMissingStressorData.setText("Missing stressor data");
        getContentPane().add(checkBoxMissingStressorData, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 134, -1, -1));

        checkBoxTransfLog.setSelected(true);
        checkBoxTransfLog.setText("Log(X+1)");
        checkBoxTransfLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxTransfLogActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxTransfLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, -1, -1));

        checkBoxTransfPercentile.setSelected(true);
        checkBoxTransfPercentile.setText("Percentile");
        getContentPane().add(checkBoxTransfPercentile, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 230, -1, -1));

        checkBoxTransfCut10.setSelected(true);
        checkBoxTransfCut10.setText("Cut highest 10%");
        getContentPane().add(checkBoxTransfCut10, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 200, -1, -1));

        jLabel7.setText("Transformation types");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, -1, -1));

        checkBoxMultiAdditive.setSelected(true);
        checkBoxMultiAdditive.setText("Additive");
        getContentPane().add(checkBoxMultiAdditive, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 300, -1, -1));

        checkBoxMultiWorst.setSelected(true);
        checkBoxMultiWorst.setText("Worst stressor");
        checkBoxMultiWorst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMultiWorstActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxMultiWorst, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 325, -1, -1));

        checkBoxMultiDiminish.setSelected(true);
        checkBoxMultiDiminish.setText("Diminishing Impacts");
        getContentPane().add(checkBoxMultiDiminish, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 350, -1, -1));

        textFieldThresholdsMax.setText("1");
        getContentPane().add(textFieldThresholdsMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 300, 50, -1));

        textFieldThresholdsMin.setText("0");
        getContentPane().add(textFieldThresholdsMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 300, 52, -1));

        checkBoxThresholds.setSelected(true);
        checkBoxThresholds.setText("Ecological thresholds");
        getContentPane().add(checkBoxThresholds, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        jLabel8.setText("Spatial resolution");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        jLabel9.setText("Non-linear effects");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        checkBoxReducedAnalysisRes.setSelected(true);
        checkBoxReducedAnalysisRes.setText("Reduced analysis res.");
        getContentPane().add(checkBoxReducedAnalysisRes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, -1));

        textFieldReducedAnalysisResMin.setText("1");
        getContentPane().add(textFieldReducedAnalysisResMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 370, 52, -1));

        textFieldReducedAnalysisResMax.setText("2");
        getContentPane().add(textFieldReducedAnalysisResMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 50, -1));

        checkBoxImprovedStressorRes.setSelected(true);
        checkBoxImprovedStressorRes.setText("Improved stressor res.");
        getContentPane().add(checkBoxImprovedStressorRes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, -1, -1));

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });
        getContentPane().add(buttonCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 500, 190, 30));

        buttonRunSimulation.setText("Run simulation");
        buttonRunSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunSimulationActionPerformed(evt);
            }
        });
        getContentPane().add(buttonRunSimulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 500, 190, 30));

        jLabel10.setText("Impacts on multiple ecol. comp.");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        checkBoxImpactsAsSum.setSelected(true);
        checkBoxImpactsAsSum.setText("Sum");
        getContentPane().add(checkBoxImpactsAsSum, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, -1, -1));

        checkBoxImpactsAsMean.setSelected(true);
        checkBoxImpactsAsMean.setText("Mean");
        checkBoxImpactsAsMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxImpactsAsMeanActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxImpactsAsMean, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, -1, -1));

        jLabel11.setText("Multiple effects models");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 280, -1, -1));

        checkBoxSpatialSummary.setSelected(true);
        checkBoxSpatialSummary.setText("Spatial summary (much slower processing!)");
        getContentPane().add(checkBoxSpatialSummary, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 440, -1, -1));

        checkBoxAddRunsToResults.setSelected(true);
        checkBoxAddRunsToResults.setText("Show simulation runs in project results");
        getContentPane().add(checkBoxAddRunsToResults, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 420, -1, -1));

        checkBoxSaveContributionsPerSimulation.setSelected(true);
        checkBoxSaveContributionsPerSimulation.setText("Save impact contributions for each simulation");
        getContentPane().add(checkBoxSaveContributionsPerSimulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 460, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOutputFolderActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setCurrentDirectory(new File(GlobalResources.lastUsedFolder));
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            this.textFieldOutputFolder.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_buttonOutputFolderActionPerformed

    private void textFieldSensitivtyScoreErrorMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldSensitivtyScoreErrorMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldSensitivtyScoreErrorMaxActionPerformed

    private void textFieldSensitivtyScoreErrorsMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldSensitivtyScoreErrorsMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldSensitivtyScoreErrorsMinActionPerformed

    private void checkBoxTransfLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxTransfLogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxTransfLogActionPerformed

    private void checkBoxMultiWorstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMultiWorstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxMultiWorstActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonRunSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunSimulationActionPerformed
       
        this.simulationReady=false;
        String error="";
        
        try{mcm.simulationRuns=Integer.parseInt(this.textFieldSimulationRuns.getText());} catch(Exception e)  {error="Simulation runs must be given as integer.";}
        
        mcm.outputFolder=this.textFieldOutputFolder.getText();
        File outputFolder=null;
        try {outputFolder=new File(this.textFieldOutputFolder.getText());} catch(Exception e) {error="Please select a valid output folder.";}
        if(outputFolder==null || !outputFolder.isDirectory()) {error="Please select a valid output folder.";}
        
        try
        {
            mcm.missingStressorData=this.checkBoxMissingStressorData.isSelected();
            mcm.missingStressorDataMin=Double.parseDouble(this.textFieldMissingStressorDataMin.getText());
            mcm.missingStressorDataMax=Double.parseDouble(this.textFieldMissingStressorDataMax.getText());
        }
        catch(Exception e) {error="Missing stressor data range must be numeric.";}
        
       
       try
        {
            mcm.sensitivityScoreErrors=this.checkBoxSensitivtyScoreErrors.isSelected();
            mcm.sensitivityScoreErrorsMin=Double.parseDouble(this.textFieldSensitivtyScoreErrorsMin.getText());
            mcm.sensitivityScoreErrorsMax=Double.parseDouble(this.textFieldSensitivtyScoreErrorMax.getText());
        }
        catch(Exception e) {error="Sensitivty score error range must be numeric.";}
       
       try
        {
            mcm.pointStressLinearDecay=this.checkBoxPointStressDecay.isSelected();
            mcm.pointDataLinearDecayMin=Double.parseDouble(this.textFieldPointStressDecayMin.getText());
            mcm.pointDataLinearDecayMax=Double.parseDouble(this.textFieldPointStressDecayMax.getText());
        }
        catch(Exception e) {error="Point data stress decay range ,ust be numeric.";}
       
       try
        {
            mcm.ecologicalThresholds=this.checkBoxThresholds.isSelected();
            mcm.ecologicalThresholdMin=Double.parseDouble(this.textFieldThresholdsMin.getText());
            mcm.ecologicalThresholdMax=Double.parseDouble(this.textFieldThresholdsMax.getText());
        }
        catch(Exception e) {error="Ecological thresholds range must be numeric.";}
       
       try
        {
            mcm.reducedAnalysisRes=this.checkBoxReducedAnalysisRes.isSelected();
            mcm.reducedAnalysisResMin=Double.parseDouble(this.textFieldReducedAnalysisResMin.getText());
            mcm.reducedAnalysisResMax=Double.parseDouble(this.textFieldReducedAnalysisResMax.getText());
        }
        catch(Exception e) {error="Reduced analysis resolution range must be numeric.";}
       
       try
        {
            mcm.reducedAnalysisRes=this.checkBoxReducedAnalysisRes.isSelected();
            mcm.reducedAnalysisResMin=Double.parseDouble(this.textFieldReducedAnalysisResMin.getText());
            mcm.reducedAnalysisResMax=Double.parseDouble(this.textFieldReducedAnalysisResMax.getText());
        }
        catch(Exception e) {error="Reduced analysis resolution range must be numeric.";}
       

       mcm.improvedStressorRes=this.checkBoxImprovedStressorRes.isSelected();
       
       mcm.impactsAsSum = this.checkBoxImpactsAsSum.isSelected();
       mcm.impactsAsMean = this.checkBoxImpactsAsMean.isSelected();
       
       mcm.transformationNone=this.checkBoxTransfNone.isSelected();
       mcm.transformationLog=this.checkBoxTransfLog.isSelected();
       mcm.transformationCut5=this.checkBoxTransfCut10.isSelected();
       mcm.transformationPercentile=this.checkBoxTransfPercentile.isSelected();
       
       mcm.multipleEffectsAdditive=this.checkBoxMultiAdditive.isSelected();
       mcm.multipleEffectsDominant=this.checkBoxMultiWorst.isSelected();
       mcm.multipleEffectsDiminishing=this.checkBoxMultiDiminish.isSelected();
       
       mcm.createSpatialOutputs = this.checkBoxSpatialSummary.isSelected();
       mcm.addRunsToResults = this.checkBoxAddRunsToResults.isSelected();
       mcm.saveContributionsPerSimulation = this.checkBoxSaveContributionsPerSimulation.isSelected();
       
       
       if(!this.checkBoxImpactsAsSum.isSelected() && !this.checkBoxImpactsAsMean.isSelected())
       {error="At least one impact model for multiple ecological components in a cell must be selected.";}
       
       if(!this.checkBoxMultiAdditive.isSelected() && !this.checkBoxMultiDiminish.isSelected() && !this.checkBoxMultiWorst.isSelected())
       {error = "At least one multiple effects model must be selected.";}
       
       if(!this.checkBoxTransfCut10.isSelected() && !this.checkBoxTransfLog.isSelected() && !this.checkBoxTransfNone.isSelected() && !this.checkBoxTransfPercentile.isSelected())
       { error= "At least one stressor data transformation must be selected.";}
       
       if(error.equals(""))
       {
           this.simulationReady=true;
           this.setVisible(false);
       }
       else
       {
           JOptionPane.showMessageDialog(this, error);
       }
    }//GEN-LAST:event_buttonRunSimulationActionPerformed

    private void checkBoxImpactsAsMeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxImpactsAsMeanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxImpactsAsMeanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MonteCarloRanksDialog dialog = new MonteCarloRanksDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOutputFolder;
    private javax.swing.JButton buttonRunSimulation;
    private javax.swing.JCheckBox checkBoxAddRunsToResults;
    private javax.swing.JCheckBox checkBoxImpactsAsMean;
    private javax.swing.JCheckBox checkBoxImpactsAsSum;
    private javax.swing.JCheckBox checkBoxImprovedStressorRes;
    private javax.swing.JCheckBox checkBoxMissingStressorData;
    private javax.swing.JCheckBox checkBoxMultiAdditive;
    private javax.swing.JCheckBox checkBoxMultiDiminish;
    private javax.swing.JCheckBox checkBoxMultiWorst;
    private javax.swing.JCheckBox checkBoxPointStressDecay;
    private javax.swing.JCheckBox checkBoxReducedAnalysisRes;
    private javax.swing.JCheckBox checkBoxSaveContributionsPerSimulation;
    private javax.swing.JCheckBox checkBoxSensitivtyScoreErrors;
    private javax.swing.JCheckBox checkBoxSpatialSummary;
    private javax.swing.JCheckBox checkBoxThresholds;
    private javax.swing.JCheckBox checkBoxTransfCut10;
    private javax.swing.JCheckBox checkBoxTransfLog;
    private javax.swing.JCheckBox checkBoxTransfNone;
    private javax.swing.JCheckBox checkBoxTransfPercentile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField textFieldMissingStressorDataMax;
    private javax.swing.JTextField textFieldMissingStressorDataMin;
    private javax.swing.JTextField textFieldOutputFolder;
    private javax.swing.JTextField textFieldPointStressDecayMax;
    private javax.swing.JTextField textFieldPointStressDecayMin;
    private javax.swing.JTextField textFieldReducedAnalysisResMax;
    private javax.swing.JTextField textFieldReducedAnalysisResMin;
    private javax.swing.JTextField textFieldSensitivtyScoreErrorMax;
    private javax.swing.JTextField textFieldSensitivtyScoreErrorsMin;
    private javax.swing.JTextField textFieldSimulationRuns;
    private javax.swing.JTextField textFieldThresholdsMax;
    private javax.swing.JTextField textFieldThresholdsMin;
    // End of variables declaration//GEN-END:variables
}
